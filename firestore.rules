rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidCharacter() {
      let character = resource.data;
      return character.size() > 0 &&
             character.name is string &&
             character.name.size() >= 2 &&
             character.name.size() <= 20 &&
             character.class is string &&
             character.level is number &&
             character.level >= 1 &&
             character.level <= 20 &&
             character.experience is number &&
             character.experience >= 0 &&
             character.health is number &&
             character.health >= 1 &&
             character.maxHealth is number &&
             character.maxHealth >= character.health;
    }
    
    function isValidCampaign() {
      let campaign = resource.data;
      return campaign.size() > 0 &&
             campaign.theme is string &&
             campaign.theme.size() >= 3 &&
             campaign.theme.size() <= 50 &&
             campaign.code is string &&
             campaign.code.size() == 6 &&
             campaign.players is list &&
             campaign.players.size() <= 6 &&
             campaign.started is bool &&
             campaign.createdAt is timestamp;
    }
    
    function isValidMessage() {
      let message = resource.data;
      return message.size() > 0 &&
             message.content is string &&
             message.content.size() > 0 &&
             message.content.size() <= 500 &&
             message.type in ['player', 'dm', 'system'] &&
             message.timestamp is timestamp;
    }

    // User profiles - users can only read/write their own profile
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId) && 
        request.resource.data.keys().hasAll(['displayName', 'email', 'createdAt']) &&
        request.resource.data.displayName is string &&
        request.resource.data.displayName.size() >= 2 &&
        request.resource.data.displayName.size() <= 50 &&
        request.resource.data.email is string &&
        request.resource.data.createdAt is timestamp;
      
      // Allow users to list their own user document, needed for some queries
      allow list: if isAuthenticated() && request.query.resource.data.userId == request.auth.uid;
    }

    // Characters - users can only access their own characters
    match /characters/{characterId} {
      allow get, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // A user can list characters if they are authenticated. 
      // The query in the app must filter by the user's ID.
      allow list: if isAuthenticated();

      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        isValidCharacter();
    }

    match /collections/{collectionId} {
      allow read, write: if isAuthenticated();
    }

    // Campaigns - users can read campaigns they're part of, hosts can modify
    match /campaigns/{campaignId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid in resource.data.get('playerIds', []) ||
         resource.data.players.hasAny([{'id': request.auth.uid}]));
      
      allow list: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
        request.resource.data.players[0].id == request.auth.uid &&
        isValidCampaign();
      
      allow update: if isAuthenticated() && 
        (request.auth.uid in resource.data.get('playerIds', []) ||
         resource.data.players.hasAny([{'id': request.auth.uid}]));
         
      allow delete: if isAuthenticated() && 
        (resource.data.players.hasAny([{'id': request.auth.uid, 'isHost': true}]) ||
         request.auth.uid in resource.data.get('hostIds', []));
    }

    // Campaign messages - users can read/write messages in campaigns they're part of
    match /campaigns/{campaignId}/messages/{messageId} {
      allow read, write: if isAuthenticated() && 
        exists(/databases/$(database)/documents/campaigns/$(campaignId)) &&
        (request.auth.uid in get(/databases/$(database)/documents/campaigns/$(campaignId)).data.get('playerIds', []) ||
         get(/databases/$(database)/documents/campaigns/$(campaignId)).data.players.hasAny([{'id': request.auth.uid}]));
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/campaigns/$(campaignId)) &&
        (request.auth.uid in get(/databases/$(database)/documents/campaigns/$(campaignId)).data.get('playerIds', []) ||
         get(/databases/$(database)/documents/campaigns/$(campaignId)).data.players.hasAny([{'id': request.auth.uid}])) &&
        isValidMessage() &&
        (request.resource.data.type == 'player' ? 
          request.resource.data.playerId == request.auth.uid : true);
    }

    // Campaign players - users can read players in campaigns they're part of
    match /campaigns/{campaignId}/players/{playerId} {
      allow read: if isAuthenticated() && 
        exists(/databases/$(database)/documents/campaigns/$(campaignId)) &&
        (request.auth.uid in get(/databases/$(database)/documents/campaigns/$(campaignId)).data.get('playerIds', []) ||
         get(/databases/$(database)/documents/campaigns/$(campaignId)).data.players.hasAny([{'id': request.auth.uid}]));
      allow write: if isAuthenticated() && 
        request.auth.uid == playerId &&
        exists(/databases/$(database)/documents/campaigns/$(campaignId)) &&
        (request.auth.uid in get(/databases/$(database)/documents/campaigns/$(campaignId)).data.get('playerIds', []) ||
         get(/databases/$(database)/documents/campaigns/$(campaignId)).data.players.hasAny([{'id': request.auth.uid}]));
    }

    // World state - users can read/write world state for campaigns they're part of
    match /campaigns/{campaignId}/worldState/{stateId} {
      allow read, write: if isAuthenticated() && 
        exists(/databases/$(database)/documents/campaigns/$(campaignId)) &&
        (request.auth.uid in get(/databases/$(database)/documents/campaigns/$(campaignId)).data.get('playerIds', []) ||
         get(/databases/$(database)/documents/campaigns/$(campaignId)).data.players.hasAny([{'id': request.auth.uid}]));
    }

    // Combat state - users can read/write combat state for campaigns they're part of
    match /campaigns/{campaignId}/combat/{combatId} {
      allow read, write: if isAuthenticated() && 
        exists(/databases/$(database)/documents/campaigns/$(campaignId)) &&
        request.auth.uid in get(/databases/$(database)/documents/campaigns/$(campaignId)).data.players;
    }

    // Achievements - users can only access their own achievements
    match /achievements/{achievementId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }

    // Analytics - only system can write, authenticated users can read their own
    match /analytics/{analyticsId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow write: if false; // Only allow writes from Cloud Functions
    }

    // System settings - read-only for authenticated users
    match /system/{settingId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only allow writes from Cloud Functions
    }

    // Rate limiting - users can only access their own rate limit data
    match /rateLimits/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
  }
}

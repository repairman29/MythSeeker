rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isCampaignParticipant(campaignData) {
      return isAuthenticated() && 
        request.auth.uid in campaignData.participants;
    }
    
    function isCampaignHost(campaignData) {
      return isAuthenticated() && 
        request.auth.uid == campaignData.hostId;
    }
    
    function isGameParticipant(gameData) {
      return isAuthenticated() && 
        request.auth.uid in gameData.participants;
    }
    
    function isGameHost(gameData) {
      return isAuthenticated() && 
        request.auth.uid == gameData.hostId;
    }
    
    // User profiles - users can read/write their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Player characters - users can read/write their own characters
    match /characters/{characterId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Game sessions - participants can read, host can write
    match /games/{gameId} {
      allow read: if isAuthenticated() && 
        (isGameParticipant(resource.data) || isGameHost(resource.data));
      allow write: if isAuthenticated() && 
        (isGameHost(resource.data) || 
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants', 'status'])));
      allow create: if isAuthenticated() && 
        request.resource.data.hostId == request.auth.uid;
    }
    
    // Campaign data - participants can read, host can write
    match /campaigns/{campaignId} {
      allow read: if isAuthenticated() && 
        (isCampaignParticipant(resource.data) || isCampaignHost(resource.data));
      allow write: if isAuthenticated() && 
        (isCampaignHost(resource.data) || 
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants', 'status'])));
      allow create: if isAuthenticated() && 
        request.resource.data.hostId == request.auth.uid;
      
      // Campaign subcollections
      match /rules/{ruleId} {
        allow read: if isAuthenticated() && 
          get(/databases/$(database)/documents/campaigns/$(campaignId)).data.hostId == request.auth.uid;
        allow write: if isAuthenticated() && 
          get(/databases/$(database)/documents/campaigns/$(campaignId)).data.hostId == request.auth.uid;
      }
      
      match /history/{historyId} {
        allow read: if isAuthenticated() && 
          get(/databases/$(database)/documents/campaigns/$(campaignId)).data.participants[request.auth.uid] != null;
        allow write: if isAuthenticated() && 
          get(/databases/$(database)/documents/campaigns/$(campaignId)).data.hostId == request.auth.uid;
      }
    }
    
    // Player sessions - users can read/write their own sessions
    match /sessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Achievement data - users can read/write their own achievements
    match /achievements/{achievementId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
